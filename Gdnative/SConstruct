#!python
import os, subprocess

opts = Variables([], ARGUMENTS)

# Gets the standard flags CC, CCX, etc.
env = DefaultEnvironment()

# Define our options
opts.Add(EnumVariable('target', "Compilation target", 'debug', ['d', 'debug', 'r', 'release']))
opts.Add(EnumVariable('platform', "Compilation platform", '', ['', 'windows', 'x11', 'linux', 'osx','android']))
opts.Add(EnumVariable('p', "Compilation target, alias for 'platform'", '', ['', 'windows', 'x11', 'linux', 'osx','android']))

opts.Add(EnumVariable('android_arch', "android architecture", 'armv7', ['armv7', 'arm64v8', 'x86', 'x86_64' ]))

opts.Add(BoolVariable('use_llvm', "Use the LLVM / Clang compiler", 'no'))
opts.Add(PathVariable('target_path', 'The path where the lib is installed.', 'output/bin/'))
opts.Add(PathVariable('target_name', 'The library name.', 'libgdexample', PathVariable.PathAccept))
opts.Add(PathVariable('src_path', 'The path where sources are.', 'src/moving_sprite', PathVariable.PathAccept))


# Local dependency paths, adapt them to your setup
godot_headers_path = "godot-cpp/godot_headers/"
cpp_bindings_path = "godot-cpp/"
cpp_library = "libgodot-cpp"

# only support 64 at this time..
bits = 64

# Updates the environment with the option variables.
opts.Update(env)

# Process some arguments
if env['use_llvm']:
    env['CC'] = 'clang'
    env['CXX'] = 'clang++'

if env['p'] != '':
    env['platform'] = env['p']

if env['platform'] == '':
    print("No valid target platform selected.")
    quit();

# For the reference:
# - CCFLAGS are compilation flags shared between C and C++
# - CFLAGS are for C-specific compilation flags
# - CXXFLAGS are for C++-specific compilation flags
# - CPPFLAGS are for pre-processor flags
# - CPPDEFINES are for pre-processor defines
# - LINKFLAGS are for linking flags

# Check our platform specifics
if env['platform'] == "osx":
    env['target_path'] += 'osx/'
    cpp_library += '.osx'
    if env['target'] in ('debug', 'd'):
        env.Append(CCFLAGS=['-g', '-O2', '-arch', 'x86_64'])
        env.Append(LINKFLAGS=['-arch', 'x86_64'])
    else:
        env.Append(CCFLAGS=['-g', '-O3', '-arch', 'x86_64'])
        env.Append(LINKFLAGS=['-arch', 'x86_64'])

elif env['platform'] in ('x11', 'linux'):
    env['target_path'] += 'x11/'
    cpp_library += '.linux'
    if env['target'] in ('debug', 'd'):
        env.Append(CCFLAGS=['-fPIC', '-g3', '-Og','-Wall'])
        env.Append(CXXFLAGS=['-std=c++17'])
    else:
        env.Append(CCFLAGS=['-fPIC', '-g', '-O3'])
        env.Append(CXXFLAGS=['-std=c++17'])

elif env['platform'] == 'android':
    env['CC'] = '/home/raptor/Android/Sdk/ndk/21.0.6113669/toolchains/llvm/prebuilt/linux-x86_64/bin/'
    env['CXX'] = '/home/raptor/Android/Sdk/ndk/21.0.6113669/toolchains/llvm/prebuilt/linux-x86_64/bin/'
    if env['android_arch'] == 'arm64v8':
        env['CC'] += 'aarch64-linux-android29-clang'
        env['CXX'] += 'aarch64-linux-android29-clang++'
    elif env['android_arch'] == 'armv7':
        env['CC'] += 'armv7a-linux-androideabi29-clang'
        env['CXX'] += 'armv7a-linux-androideabi29-clang++'
    elif env['android_arch'] == 'x86':
        env['CC'] += 'i686-linux-android29-clang'
        env['CXX'] += 'i686-linux-android29-clang++'
    elif env['android_arch'] == 'x86_64':
        env['CC'] += 'x86_64-linux-android29-clang'
        env['CXX'] += 'x86_64-linux-android29-clang++'
    else:
        print("Error wrong architecture")
        quit();

    env['target_path'] += 'android'+ env['android_arch'] + '/'
    cpp_library += '.android'
    if env['target'] in ('debug', 'd'):
        env.Append(CCFLAGS=['-fPIC', '-g3', '-Og'])
        env.Append(CXXFLAGS=['-std=c++17'])
    else:
        env.Append(CCFLAGS=['-fPIC', '-g', '-O3'])
        env.Append(CXXFLAGS=['-std=c++17'])


elif env['platform'] == "windows":
    env['target_path'] += 'win64/'
    cpp_library += '.windows'
    env['CXX'] = 'x86_64-w64-mingw32-g++'
    env['AR'] = "x86_64-w64-mingw32-ar"
    env['RANLIB'] = "x86_64-w64-mingw32-ranlib"
    env['LINK'] = "x86_64-w64-mingw32-g++"

    env.Append(CCFLAGS=['-g', '-O3', '-std=c++17', '-Wwrite-strings'])
    env.Append(LINKFLAGS=[
        '--static',
        '-Wl,--no-undefined',
        '-static-libgcc',
        '-static-libstdc++',
    ])
    # This makes sure to keep the session environment variables on windows,
    # that way you can run scons in a vs 2017 prompt and it will find all the required tools
#    env.Append(ENV=os.environ)

#   env.Append(CPPDEFINES=['WIN32', '_WIN32', '_WINDOWS', '_CRT_SECURE_NO_WARNINGS'])
#    env.Append(CCFLAGS=['-W3', '-GR'])
#    if env['target'] in ('debug', 'd'):
#        env.Append(CPPDEFINES=['_DEBUG'])
#        env.Append(CCFLAGS=['-EHsc', '-MDd', '-ZI'])
#        env.Append(LINKFLAGS=['-DEBUG'])
#    else:
#        env.Append(CPPDEFINES=['NDEBUG'])
#        env.Append(CCFLAGS=['-O2', '-EHsc', '-MD'])

if env['target'] in ('debug', 'd'):
    cpp_library += '.debug'
else:
    cpp_library += '.release'

if env['platform'] == 'android':
    cpp_library += '.' + env['android_arch']
else:
    cpp_library += '.' + str(bits)

# make sure our binding library is properly includes
env.Append(CPPPATH=['.', godot_headers_path, cpp_bindings_path + 'include/', cpp_bindings_path + 'include/core/', cpp_bindings_path + 'include/gen/'])
env.Append(LIBPATH=[cpp_bindings_path + 'bin/'])
env.Append(LIBS=[cpp_library])

# tweak this if you want to use different folders, or more folders, to store your source code in.
env.Append(CPPPATH=env['src_path'])
sources = Glob(env['src_path'] + '/*.cpp')

library = env.SharedLibrary(target=env['target_path'] + env['target_name'] , source=sources)

Default(library)

# Generates help for the -h scons option.
Help(opts.GenerateHelpText(env))
